# -*- coding: utf-8 -*-
"""heart-attack-prediction-dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DD9Dxkg-mxfOpKIVD89anx68L13GiO5c
"""

!pip install opendatasets
import opendatasets as od
!pip install scikeras[tensorflow]

dataset_link="https://www.kaggle.com/datasets/iamsouravbanerjee/heart-attack-prediction-dataset"
od.download(dataset_link)

import os
os.chdir("heart-attack-prediction-dataset")
os.listdir()

def convert_diet(diet):
  if diet == 'Average':
    return 0
  elif diet == 'Unhealthy':
    return 1
  else:
    return 0

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
ha=pd.read_csv("heart_attack_prediction_dataset.csv")
ha_pressure = ha["Blood Pressure"].str.split("/", n =1, expand = True)
ha_pressure[1] = ha_pressure[1].astype(float)
ha_pressure[0] = ha_pressure[0].astype(float)
ha_pressure["Percentage"] = ha_pressure[1] / ha_pressure[0] * 100
ha_pressure["Classification"] = ha_pressure["Percentage"].apply(lambda x: 0 if x > 65 else 1)
x= ha.drop(['Heart Attack Risk','Country','Continent','Hemisphere','Sex','Patient ID','Blood Pressure'], axis=1)
x["Diet"]=ha["Diet"].apply(convert_diet)
x["Classification"] = ha_pressure["Classification"]
y=ha[['Heart Attack Risk']]
x.head()

from sklearn.model_selection import train_test_split
train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.2, random_state=0, stratify=y)

from keras.models import Sequential
from keras.layers import Dense
from keras import layers

model = Sequential()
model.add(Dense(24, activation='relu'))
model.add(Dense(12, activation='relu'))
model.add(Dense(6, activation='relu'))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='mean_squared_error',
              optimizer='rmsprop',
              metrics=['accuracy'])
model.fit(x, y, validation_split=0.2, epochs=100, batch_size=5, shuffle=True)

scores = model.evaluate(test_x, test_y)
print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))